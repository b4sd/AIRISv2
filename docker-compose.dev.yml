version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: voice-reading-postgres
    environment:
      POSTGRES_DB: voice_reading_dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d voice_reading_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: voice-reading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: voice-reading-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API (optional - can run locally for development)
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   container_name: voice-reading-backend
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgresql://dev:dev123@postgres:5432/voice_reading_dev
  #     REDIS_URL: redis://redis:6379
  #     S3_ENDPOINT: http://minio:9000
  #     S3_ACCESS_KEY: minioadmin
  #     S3_SECRET_KEY: minioadmin123
  #     S3_BUCKET: voice-reading-files
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./backend/src:/app/src
  #     - ./shared:/app/shared
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: voice-reading-network
